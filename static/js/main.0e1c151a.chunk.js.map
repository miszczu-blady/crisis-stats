{"version":3,"sources":["app/components/organisms/chart.tsx","app/components/pages/main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Title","Typography","OChart","data","title","level","width","height","stroke","strokeDasharray","dataKey","type","yAxisId","style","marginTop","dataSource","columns","key","dataIndex","pagination","size","summary","pageData","_","Header","Layout","Content","Sider","MainPage","useState","selectedItem","setSelectedItem","className","theme","mode","defaultSelectedKeys","Item","selectedKeys","onSelect","background","minHeight","padding","dataClosed","dataSuspensed","closed","suspended","name","getData","together","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0e1c151a.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { Typography, Table } from 'antd';\nimport * as _ from 'lodash';\n\nimport { LineChart, XAxis, Tooltip, CartesianGrid, Line, YAxis, Legend } from 'recharts';\n\nconst { Title } = Typography;\n\ninterface Props {\n  data: Array<any>\n  title: string\n}\n\nconst OChart: FC<Props> = ({\n  data,\n  title\n}) => {\n  return <div>\n    <Title level={2}>{title}</Title>\n    <LineChart width={1000} height={500} data={data}>\n      <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\"/>\n      <XAxis dataKey=\"name\" />\n      <YAxis type=\"number\" />\n      <Legend />\n      <Tooltip />\n      <Line type=\"monotone\" dataKey=\"2019\" stroke=\"#8884d8\" yAxisId={0} />\n      <Line type=\"monotone\" dataKey=\"2020\" stroke=\"#82ca9d\" yAxisId={0} />\n    </LineChart>\n\n    <div style={{width: 600, marginTop: 40}}>\n      <Table\n        dataSource={data}\n        columns={[\n          {key: 'name', title: 'Data', dataIndex: 'name'},\n          {key: '2019', title: '2019', dataIndex: '2019'},\n          {key: '2020', title: '2020', dataIndex: '2020'},\n        ]}\n        pagination={false}\n        size=\"small\"\n        summary={(pageData) => (\n          <tr>\n            <td><strong>Suma:</strong></td>\n            <td><strong>{ _.sumBy(pageData, '2019') }</strong></td>\n            <td><strong>{ _.sumBy(pageData, '2020') }</strong></td>\n          </tr>\n        )}\n      />\n    </div>\n  </div>\n}\n\nexport { OChart }\n","import React, { FC, useState } from 'react';\nimport * as _ from 'lodash';\nimport { Layout, Menu } from 'antd';\n\nimport { OChart } from '../organisms/chart';\n\nimport dataClosed from '../../../data/closed.json';\nimport dataSuspensed from '../../../data/suspended.json';\n\nconst { Header, Content, Sider } = Layout;\n\ntype SelectedItem = 'closed' | 'suspended' | 'together';\n\nconst MainPage: FC = () => {\n  const [selectedItem, setSelectedItem] = useState<SelectedItem>('closed')\n\n  const titles = {\n    closed: 'Liczba zamkniętych działalności gospodarczych 2020 vs. 2019',\n    suspended: 'Liczba zawieszonych działalności gospodarczych 2020 vs. 2019',\n    together: 'Liczba zamkniętych i zamkniętych działalności gospodarczych 2020 vs. 2019',\n  }\n\n  const getData = (selectedItem: SelectedItem) => {\n    if (selectedItem === 'closed') return dataClosed;\n    else if (selectedItem === 'suspended') return dataSuspensed;\n    else return _.zipWith(dataClosed, dataSuspensed, (closed, suspended) => ({\n      name: closed.name,\n      '2019': closed['2019'] + suspended['2019'],\n      '2020': closed['2020'] && suspended['2020']\n        ? closed['2020'] + suspended['2020']\n        : (closed['2020'] || suspended['2020']),\n  }));\n  }\n\n  return <Layout>\n    <Header className=\"header\">\n      <Menu\n        theme=\"dark\"\n        mode=\"horizontal\"\n        defaultSelectedKeys={['ceidg']}\n      >\n        <Menu.Item key=\"ceidg\">CEIDG</Menu.Item>\n      </Menu>\n    </Header>\n    <Content>\n      <Layout>\n        <Sider width={200}>\n          <Menu\n            mode=\"inline\"\n            selectedKeys={[selectedItem]}\n            style={{ height: '100%' }}\n            onSelect={({ key }) => setSelectedItem(key as SelectedItem)}\n          >\n            <Menu.Item key=\"closed\">Zamknięte</Menu.Item>\n            <Menu.Item key=\"suspended\">Zawieszone</Menu.Item>\n            <Menu.Item key=\"together\">Razem</Menu.Item>\n          </Menu>\n        </Sider>\n        <Content style={{ background: '#fff', minHeight: 680, padding: 20 }}>\n          <OChart\n            data={getData(selectedItem)}\n            title={titles[selectedItem]}\n          />\n        </Content>\n      </Layout>\n    </Content>\n  </Layout>\n}\n\nexport { MainPage }\n","import React from 'react';\n\nimport { MainPage } from './app/components/pages/main';\n\nimport './App.css';\nimport 'antd/dist/antd.css'\n\n\nfunction App() {\n  return (\n    <MainPage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}